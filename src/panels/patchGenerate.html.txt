<!DOCTYPE html>
<html lang="pt-br">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>${d.localize["tds.webview.patch.generate"]}</title><!--Patch Generate-->
</head>

<style>
	${d.css}

    #parent {
      display: table;
      width: 600px;
      height: 300px;
    }
    #child {
        display: table-cell;
        vertical-align: middle;
	}
	#loading {
		z-index: 20;
		position: relative;
		left: 100px;
		top: -515px;
	}
</style>

<body>
		<div class="mainContainer">
				<div class="formWrap"
					style="width: 768px;">

					<div class="logo">
						<span class="formTitle">${d.localize["tds.webview.patch.generate"]}</span><!--Patch Generate-->
					</div>
							<br>
							<input type="checkbox" id="CheckIgnoreTRes" checked><label for="CheckIgnoreTRes">${d.localize["tds.webview.patch.ignore.files"]} .TRES</label><!--Ignore files-->
							<div id="parent">
								<div id="child">
									<p>
										<input id="FilterInput" type="text" value="" placeholder="${d.localize['tds.webview.patch.filter']}" style="width: 245px;" onFocusOut="filterLeft();"><!--Filter, ex: MAT or * All (slow)-->
									</p>

									<select class="select-default" id="SelectL" multiple="multiple">
									</select>

									<p id="SelectLCount">${d.localize["tds.webview.patch.items"]}: </p><!--Items-->
								</div>

								<div id="child">
									<input class="btn-default" id="loadRight" type="button" value=">>" onclick="loadRight();" style="width: 80px; margin: 10px;"/>
								</div>

								<div id="child">
									<p>
										<input class="btn-default" id="clearSelected" type="button" value=" ${d.localize['tds.webview.patch.clean.selected']} " onclick="clearSelected();"/><!--Cleans Selected-->
										<input class="btn-default" id="clearAll"      type="button" value=" ${d.localize['tds.webview.patch.clean.all']} " onclick="clearAll();"/><!--Clean All-->
									</p>
									<select class="select-default" id="SelectR"  multiple="multiple">
									</select>

									<p id="SelectRCount">${d.localize["tds.webview.patch.items"]}: </p><!--Items-->
								</div>
							</div>

							<div class="wrap-input">
								<label for="NamePatch">${d.localize["tds.webview.patch.directory"]}</label><!--Patch Generation Directory-->
								<input class="inputWithButton" type="text" id="FilePatch" name="FilePatch" onchange="checkDir(event)" placeholder="Ex: C:/totvs/patchs...">
								<input class="inputButton" type="button" id="btn-PatchDir" onclick="selectPatchGenerateDir()" name="btn-PatchDir" value="${d.localize['tds.webview.patch.select']}" />
								<label for="NamePatch">${d.localize["tds.webview.patch.file.name.patch"]}</label><!--Patch file name-->
								<input class="inputText" type="text" id="NamePatch" placeholder="${d.localize['tds.webview.patch.file.name']}"><!--File name-->
							</div>

							<div class="wrap-submit">
								<input class="btn-submit" readonly id="submitID" type="button" value="${d.localize['tds.webview.patch.items.generate']}" onclick="patchGenerate(false);"/><!--Generate-->
								<input class="btn-submit" readonly id="submitID" type="button" value="${d.localize['tds.webview.patch.items.generate.close']}" onclick="patchGenerate(true);"/><!--Generate/Close-->
							</div>

							<p>* ${d.localize["tds.webview.patch.message1"]}</p><!--The generated patch is based on the files that are in the RPO.Guarantee that the included fonts are compiled.-->
							<div id="loading">
								<svg width='36' height='36' version='1.1' xmlns='http://www.w3.org/2000/svg'>
									<g transform='translate(18,18)' >
										<g transform='rotate(45)' >
											<circle fill='none' stroke='#424142' cx='0' cy='0' r='16' stroke-width='3' />
											<line x1='-13' y1='-13' x2='13' y2='13' stroke='#CCCCCC' stroke-width='4'  />
											<animateTransform attributeName='transform' type='rotate' values='0; 360' dur='2s' repeatCount='indefinite' rotate='auto'/>
										</g>
									</g>
									<circle fill='#CCCCCC' cx='18' cy='18' r='11' stroke-width='3'/>
									<g transform='translate(18,18)' >
										<g transform='rotate(45)' >
											<circle fill='none' stroke='#9C9A9C' cx='0' cy='0' r='11' stroke-width='3'/>
											<circle fill='#CCCCCC' cx='2' cy='0' r='11.5' stroke-width='3'/>
											<line x1='0' y1='13' x2='2' y2='-12' stroke='#CCCCCC' stroke-width='5'  />
											<line x1='2' y1='14' x2='4' y2='-14' stroke='#CCCCCC' stroke-width='2'  />
											<line x1='4' y1='13' x2='6' y2='-13' stroke='#CCCCCC' stroke-width='2'  />
											<animateTransform attributeName='transform' type='rotate' values='360; 0' dur='1.3s' repeatCount='indefinite' rotate='auto'/>
										</g>
									</g>
								</svg>
						</div>
				</div>
			</div>
</body>


<script>
	const vscode = acquireVsCodeApi();
	const srcMapR = new Map();
	window.onload = () => {
		// [TODO: Mansano - Alimentar com retorno do Inspetor de objetos]
		// [TODO: Mansano - Inspetor de objetos deve retornar os dados em Upper, a ordenacao deve ser feita no JS]
		srcAll = [] // Todos os fontes
		srcR = [] // Filtrados Listbox direita
		vscode.postMessage({
			command: 'onload'
		});

		SelectL = document.getElementById("SelectL");
		SelectR = document.getElementById("SelectR");
		SelectLCount = document.getElementById("SelectLCount");
		//SelectRCount = document.getElementById("SelectRCount");
		FilterInput = document.getElementById("FilterInput");
		FilterBtn = document.getElementById("FilterBtn");
		NamePatch = document.getElementById("NamePatch");
		CheckIgnoreTRes = document.getElementById("CheckIgnoreTRes");
		BtnPatchDir = document.getElementById('btn-PatchDir');

		// Associa pressEvent do campo de filtro
		FilterInput.addEventListener("keyup", event => {
			// Enter
			if (event.keyCode === 13) {
				event.preventDefault();
				filterLeft();
			}
			else if (event.keyCode === 56 || event.keyCode === 106){
				CheckIgnoreTRes.checked = true;
			}
		});
	}

	// O Array devera ser indexado primeiramente em PRW/PRX/PRG e depois o RESTANTE
	//------------------------------------------------------
	function indexArray(arr){
		arr.sort();
		var filterSRC = arr.filter(el => (el.includes(".PRW") || el.includes(".PRX") || el.includes(".PRG") ) );
    var filterRES = arr.filter(el => (!el.includes(".PRW") && !el.includes(".PRX") && !el.includes(".PRG") ) );
		var newArr = filterSRC.concat(filterRES);
		return newArr;
	}

  // Filtra dados do Array principal e exibe na listbox da Esquerda
	//------------------------------------------------------
  function filterLeft(){
		let query = FilterInput.value ? FilterInput.value.toUpperCase() : "";
    let lenQuery = query.length;
		let filterData;

		if (query === "") {
			filterData = [ "<< ${d.localize['tds.webview.patch.display']} >>" ];
		} else if (query === "*" && CheckIgnoreTRes.checked == false){
			filterData = [...srcAll]; // Spread Ã© a clonagem mais rapida de Arrays
		}
		else if (query === "*" && CheckIgnoreTRes.checked == true){
			filterData = srcAll.filter(el => !el.includes(".TRES"));
		}
		else if (query != "*" && CheckIgnoreTRes.checked == false){
			filterData = srcAll.filter(el => el.includes(query.replace(/\\*/g,"")));
		}
		else if (query != "*" && CheckIgnoreTRes.checked == true){
			filterData = srcAll.filter(el => el.includes(query.replace(/\\*/g,"")) && !el.includes(".TRES"));
		}

		/* TODO: Separar resource e program com o optgroup
		<select class="personalizar-select" size=10>
  		<optgroup label="Swedish Cars">
    		<option class="personalizar-option">Mustard Mustard Mustard Mustard</option>
    		<option class="personalizar-option">Ketchup Ketchup Ketchup Ketchup</option>
    	</optgroup>
      <optgroup label="TESTE Cars">
    		<option class="personalizar-option">Relish Relish Relish Relish</option>
    	</optgroup>
		</select>
		*/

		SelectL.innerHTML = "";
		filterData = indexArray(filterData);
    filterData.forEach((value, index) => {
      var newOption = document.createElement("option");
			newOption.text = value;
			newOption.className = "option-default" //Definir a classe do componente e aplicar o css no arquivo especifico.
			SelectL.add(newOption);
			//if(index === (filterData.length - 1)) {
				//SelectL.style = "background: #505050;";
			//}
		});
    // Exibe quantidade de itens filtrados
		SelectLCount.innerHTML = "${d.localize['tds.webview.patch.items']}" + ": " + filterData.length;//Items
		if (srcAll.length > 0)
		  document.getElementById("loading").style.display = 'none';
	};

	// Carrega arquivos selecionados na listbox da Direita
	//------------------------------------------------------
	function loadRight(){
		let lenFrom = SelectL.length;
		let source;
		//	// Percorre itens selecionados da listbox Esquerda
		if(SelectL.selectedOptions) {
			let selectedValues = Array.from(SelectL.selectedOptions).map(option => {
				if(!srcMapR.has(option.text)) {
						srcR.push(option.text);
				}
			});
		}

		// Alimenta listbox direita
		SelectR.innerHTML = "";
		srcR = indexArray(srcR);

		srcMapR.clear();
		srcR.forEach( text => {
			var newOption = document.createElement("option");
			newOption.text = text;
			//newOption.style = "clear: both; display: inline; float: left;";
			newOption.className = "option-default"; //Como boa pratica, definir a classe do componente e aplicar o css no arquivo especifico.
			SelectR.add(newOption);
			srcMapR.set(text,newOption);
		});

		// Exibe quantidade de itens filtrados
    SelectRCount.innerHTML = "${d.localize['tds.webview.patch.items']}" +  ": " + srcR.length;
	}

	// Limpa itens selecionados da Direita
	//------------------------------------------------------
	function clearSelected(){
		let length = srcR.length;

		for(let i=length-1; i>=0; i--){
			if(SelectR.options[i].selected){
				srcMapR.delete(SelectR.options[i].text);
				SelectR.options[i] = null;
				srcR.splice(i, 1);
			}
		}

		// Exibe quantidade de itens filtrados
    SelectRCount.innerHTML = "${d.localize['tds.webview.patch.items']}" +  ": " + srcR.length;
	}

	// Limpa todos da Direita
	//------------------------------------------------------
	function clearAll(){
		SelectR.innerHTML = "";
		srcR = [];
		srcMapR.clear();
		// Exibe quantidade de itens filtrados
    SelectRCount.innerHTML = "${d.localize['tds.webview.patch.items']}" +  ": 0";
	};

	function checkDir(event) {
		var input = event.target;
		var selectedDir = input.value;
		vscode.postMessage({
			command: 'checkDir',
			selectedDir: selectedDir
		});
	}

	function selectPatchGenerateDir() {
		vscode.postMessage({
			command: 'selectPatchGenerateDir'
		});
	}

	function patchGenerate(close) {
		let NamePatchValue = NamePatch.value ? NamePatch.value: "";
		let DirPatch = document.getElementById('FilePatch').value;
		let filesNames = Array();

		var i = 0;
		srcR.forEach ( index => {
			let idx = index.indexOf(" (");
			srcR[i] = index.substring(0, idx);
			i++;
		});

		vscode.postMessage({
			command: 'patchGenerate',
			pathFiles: srcR,
			patchDest: DirPatch,
			patchName: NamePatchValue,
			'close': close
		});

	}

	window.addEventListener('message', event => {
		const message = event.data; // The JSON data our extension sent
		switch (message.command) {
			case 'rpoObjects':
				srcAll = message.rpoObjects;
				SelectLCount.innerHTML =  "${d.localize['tds.webview.patch.items.showing']}" + ": " + srcAll.length;//Items showing
				filterLeft();
				break;
			case 'checkedDir':
				var checkedDir = message.checkedDir;
				FilePatch.value = checkedDir;
				break;
			// case 'setCurrentServer':
			// 	const server = message.serverCurrent;

			// 	// [TODO: Mansano - Como vamos estar conectados, nome e ip nao sao necessarios]
			// 	//document.getElementById('serverNameID').value = server.name;
			// 	//document.getElementById('serverAddressID').value = server.address + ":" + server.port

			// 	document.getElementById('serverEnvironmentID').value = server.environment
			// 	break;
		}
	});

</script>
</html>